// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReqMes struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqMes) Reset()         { *m = ReqMes{} }
func (m *ReqMes) String() string { return proto.CompactTextString(m) }
func (*ReqMes) ProtoMessage()    {}
func (*ReqMes) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *ReqMes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqMes.Unmarshal(m, b)
}
func (m *ReqMes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqMes.Marshal(b, m, deterministic)
}
func (m *ReqMes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMes.Merge(m, src)
}
func (m *ReqMes) XXX_Size() int {
	return xxx_messageInfo_ReqMes.Size(m)
}
func (m *ReqMes) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMes.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMes proto.InternalMessageInfo

func (m *ReqMes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ResMes struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResMes) Reset()         { *m = ResMes{} }
func (m *ResMes) String() string { return proto.CompactTextString(m) }
func (*ResMes) ProtoMessage()    {}
func (*ResMes) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *ResMes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResMes.Unmarshal(m, b)
}
func (m *ResMes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResMes.Marshal(b, m, deterministic)
}
func (m *ResMes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMes.Merge(m, src)
}
func (m *ResMes) XXX_Size() int {
	return xxx_messageInfo_ResMes.Size(m)
}
func (m *ResMes) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMes.DiscardUnknown(m)
}

var xxx_messageInfo_ResMes proto.InternalMessageInfo

func (m *ResMes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqMes)(nil), "message.ReqMes")
	proto.RegisterType((*ResMes)(nil), "message.ResMes")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb8,
	0xd8, 0x82, 0x52, 0x0b, 0x7d, 0x53, 0x8b, 0x85, 0x24, 0xb8, 0xd8, 0x93, 0xf3, 0xf3, 0x4a, 0x52,
	0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x88, 0x9a, 0x62, 0xbc, 0x6a,
	0x8c, 0xec, 0xb8, 0xd8, 0x7d, 0x21, 0x46, 0x0a, 0x19, 0x73, 0x71, 0x07, 0xa7, 0xe6, 0xa5, 0xc0,
	0xb8, 0xfc, 0x7a, 0x30, 0xab, 0x21, 0x16, 0x49, 0x21, 0x0b, 0x80, 0x4c, 0xd5, 0x60, 0x34, 0x60,
	0x74, 0xe2, 0x8c, 0x82, 0x39, 0x29, 0x89, 0x0d, 0xec, 0x44, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x83, 0x3a, 0x35, 0x91, 0xb3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Message_SendMessageClient, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Message_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Message_serviceDesc.Streams[0], "/message.Message/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSendMessageClient{stream}
	return x, nil
}

type Message_SendMessageClient interface {
	Send(*ReqMes) error
	Recv() (*ResMes, error)
	grpc.ClientStream
}

type messageSendMessageClient struct {
	grpc.ClientStream
}

func (x *messageSendMessageClient) Send(m *ReqMes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSendMessageClient) Recv() (*ResMes, error) {
	m := new(ResMes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServer is the server API for Message service.
type MessageServer interface {
	SendMessage(Message_SendMessageServer) error
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServer).SendMessage(&messageSendMessageServer{stream})
}

type Message_SendMessageServer interface {
	Send(*ResMes) error
	Recv() (*ReqMes, error)
	grpc.ServerStream
}

type messageSendMessageServer struct {
	grpc.ServerStream
}

func (x *messageSendMessageServer) Send(m *ResMes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSendMessageServer) Recv() (*ReqMes, error) {
	m := new(ReqMes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.Message",
	HandlerType: (*MessageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Message_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
